// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3hhGRWLPdvgGCLMEoJyAMR
// Component: UFMfu7u2sk
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_wearescrewed_com.module.css"; // plasmic-import: 3hhGRWLPdvgGCLMEoJyAMR/projectcss
import sty from "./PlasmicQuizletsTest.module.css"; // plasmic-import: UFMfu7u2sk/css

export type PlasmicQuizletsTest__VariantMembers = {};

export type PlasmicQuizletsTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicQuizletsTest__VariantsArgs;
export const PlasmicQuizletsTest__VariantProps = new Array<VariantPropType>();

export type PlasmicQuizletsTest__ArgsType = {};
type ArgPropType = keyof PlasmicQuizletsTest__ArgsType;
export const PlasmicQuizletsTest__ArgProps = new Array<ArgPropType>();

export type PlasmicQuizletsTest__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  tilt?: p.Flex<typeof Tilt>;
  text?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
};

export interface DefaultQuizletsTestProps {}

function PlasmicQuizletsTest__RenderFunc(props: {
  variants: PlasmicQuizletsTest__VariantsArgs;
  args: PlasmicQuizletsTest__ArgsType;
  overrides: PlasmicQuizletsTest__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Tilt
              data-plasmic-name={"tilt"}
              data-plasmic-override={overrides.tilt}
              className={classNames("__wab_instance", sty.tilt)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Quizlets"}
                    </h1>
                  }
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </Tilt>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "tilt", "text", "h1"],
  freeBox: ["freeBox", "tilt", "text", "h1"],
  tilt: ["tilt", "text", "h1"],
  text: ["text", "h1"],
  h1: ["h1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  tilt: typeof Tilt;
  text: "div";
  h1: "h1";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicQuizletsTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicQuizletsTest__VariantsArgs;
    args?: PlasmicQuizletsTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicQuizletsTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicQuizletsTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicQuizletsTest__ArgProps,
          internalVariantPropNames: PlasmicQuizletsTest__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicQuizletsTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuizletsTest";
  } else {
    func.displayName = `PlasmicQuizletsTest.${nodeName}`;
  }
  return func;
}

export const PlasmicQuizletsTest = Object.assign(
  // Top-level PlasmicQuizletsTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    tilt: makeNodeComponent("tilt"),
    text: makeNodeComponent("text"),
    h1: makeNodeComponent("h1"),

    // Metadata about props expected for PlasmicQuizletsTest
    internalVariantProps: PlasmicQuizletsTest__VariantProps,
    internalArgProps: PlasmicQuizletsTest__ArgProps
  }
);

export default PlasmicQuizletsTest;
/* prettier-ignore-end */
