// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3hhGRWLPdvgGCLMEoJyAMR
// Component: qbHLJt6pyv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_wearescrewed_com.module.css"; // plasmic-import: 3hhGRWLPdvgGCLMEoJyAMR/projectcss
import sty from "./PlasmicPreAlphaTest.module.css"; // plasmic-import: qbHLJt6pyv/css

export type PlasmicPreAlphaTest__VariantMembers = {};

export type PlasmicPreAlphaTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicPreAlphaTest__VariantsArgs;
export const PlasmicPreAlphaTest__VariantProps = new Array<VariantPropType>();

export type PlasmicPreAlphaTest__ArgsType = {};
type ArgPropType = keyof PlasmicPreAlphaTest__ArgsType;
export const PlasmicPreAlphaTest__ArgProps = new Array<ArgPropType>();

export type PlasmicPreAlphaTest__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  embedHtml?: p.Flex<typeof Embed>;
};

export interface DefaultPreAlphaTestProps {}

function PlasmicPreAlphaTest__RenderFunc(props: {
  variants: PlasmicPreAlphaTest__VariantsArgs;
  args: PlasmicPreAlphaTest__ArgsType;
  overrides: PlasmicPreAlphaTest__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"Old Test page"}</title>

        <meta key="og:title" property="og:title" content={"Old Test page"} />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Old Test page"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___4ROp6
                )}
                component={Link}
                href={"#" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hL5Ox)}
                  displayHeight={"40px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"705px" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  src={{
                    src: "/plasmic/wearescrewed_com/images/imageedit17520095357Png.png",
                    fullWidth: 1230,
                    fullHeight: 121,
                    aspectRatio: undefined
                  }}
                />
              </p.PlasmicLink>
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__hF7Nr)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/close.svg" as const}
              />
            }
            forceOpenMenu={false}
            itemsGap={8 as const}
            menuItems={
              <React.Fragment>
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__bDzWp
                  )}
                  component={Link}
                  href={"/testold" as const}
                  platform={"nextjs"}
                >
                  {"Countdown"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__wLl8W
                  )}
                  component={Link}
                  href={"/" as const}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__dQw66
                  )}
                  component={Link}
                  href={
                    "https://sites.google.com/view/wearescrewed/home/" as const
                  }
                  platform={"nextjs"}
                  target={"_blank" as const}
                >
                  {"Legacy"}
                </p.PlasmicLink>
              </React.Fragment>
            }
            openButton={
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__q4Pi2)}
                displayHeight={"33px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={"https://static1.plasmic.app/menu.svg" as const}
              />
            }
            responsiveBreakpoint={768 as const}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__b7Ia
            )}
          >
            {"Time until Finals"}
          </div>

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script src="https://cdn.logwork.com/widget/countdown.js"></script>\r\n<a href="https://logwork.com/countdown-7jck" class="countdown-timer" data-timezone="America/Chicago" data-textcolor="#1f1f1f" data-date="2022-12-19 08:00" data-background="#dde6f0" data-digitscolor="#1e2229" data-unitscolor="#1f1f1f">â €</a>' as const
            }
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__f3FMi
            )}
          >
            {"DAYS"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sy4Mf
            )}
          >
            {"HOURS"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__w4Amx
            )}
          >
            {"MINUTES"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___36Tzi
            )}
          >
            {"SECONDS"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "embedHtml"],
  navigationBar: ["navigationBar"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPreAlphaTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPreAlphaTest__VariantsArgs;
    args?: PlasmicPreAlphaTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPreAlphaTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPreAlphaTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPreAlphaTest__ArgProps,
          internalVariantPropNames: PlasmicPreAlphaTest__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPreAlphaTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPreAlphaTest";
  } else {
    func.displayName = `PlasmicPreAlphaTest.${nodeName}`;
  }
  return func;
}

export const PlasmicPreAlphaTest = Object.assign(
  // Top-level PlasmicPreAlphaTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicPreAlphaTest
    internalVariantProps: PlasmicPreAlphaTest__VariantProps,
    internalArgProps: PlasmicPreAlphaTest__ArgProps
  }
);

export default PlasmicPreAlphaTest;
/* prettier-ignore-end */
