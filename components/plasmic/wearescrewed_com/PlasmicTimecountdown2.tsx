// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3hhGRWLPdvgGCLMEoJyAMR
// Component: FnyG8lQBcG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_wearescrewed_com.module.css"; // plasmic-import: 3hhGRWLPdvgGCLMEoJyAMR/projectcss
import sty from "./PlasmicTimecountdown2.module.css"; // plasmic-import: FnyG8lQBcG/css

export type PlasmicTimecountdown2__VariantMembers = {};

export type PlasmicTimecountdown2__VariantsArgs = {};
type VariantPropType = keyof PlasmicTimecountdown2__VariantsArgs;
export const PlasmicTimecountdown2__VariantProps = new Array<VariantPropType>();

export type PlasmicTimecountdown2__ArgsType = {};
type ArgPropType = keyof PlasmicTimecountdown2__ArgsType;
export const PlasmicTimecountdown2__ArgProps = new Array<ArgPropType>();

export type PlasmicTimecountdown2__OverridesType = {
  root?: p.Flex<"div">;
  tilt?: p.Flex<typeof Tilt>;
};

export interface DefaultTimecountdown2Props {
  className?: string;
}

function PlasmicTimecountdown2__RenderFunc(props: {
  variants: PlasmicTimecountdown2__VariantsArgs;
  args: PlasmicTimecountdown2__ArgsType;
  overrides: PlasmicTimecountdown2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <Tilt
        data-plasmic-name={"tilt"}
        data-plasmic-override={overrides.tilt}
        className={classNames("__wab_instance", sty.tilt)}
      >
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__xrAuh)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"none" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"auto" as const}
          src={"https://placekitten.com/300/200" as const}
        />
      </Tilt>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tilt"],
  tilt: ["tilt"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tilt: typeof Tilt;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTimecountdown2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTimecountdown2__VariantsArgs;
    args?: PlasmicTimecountdown2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTimecountdown2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTimecountdown2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTimecountdown2__ArgProps,
          internalVariantPropNames: PlasmicTimecountdown2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTimecountdown2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimecountdown2";
  } else {
    func.displayName = `PlasmicTimecountdown2.${nodeName}`;
  }
  return func;
}

export const PlasmicTimecountdown2 = Object.assign(
  // Top-level PlasmicTimecountdown2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tilt: makeNodeComponent("tilt"),

    // Metadata about props expected for PlasmicTimecountdown2
    internalVariantProps: PlasmicTimecountdown2__VariantProps,
    internalArgProps: PlasmicTimecountdown2__ArgProps
  }
);

export default PlasmicTimecountdown2;
/* prettier-ignore-end */
