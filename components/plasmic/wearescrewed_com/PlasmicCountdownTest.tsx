// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3hhGRWLPdvgGCLMEoJyAMR
// Component: s984pKIGW0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import HeaderV1 from "../../HeaderV1"; // plasmic-import: NZ4IwD42SN/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent

import { useScreenVariants as useScreenVariants_6EdLyFs6Xvmxe } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6EDLyFs6Xvmxe/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_wearescrewed_com.module.css"; // plasmic-import: 3hhGRWLPdvgGCLMEoJyAMR/projectcss
import sty from "./PlasmicCountdownTest.module.css"; // plasmic-import: s984pKIGW0/css

export type PlasmicCountdownTest__VariantMembers = {};

export type PlasmicCountdownTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicCountdownTest__VariantsArgs;
export const PlasmicCountdownTest__VariantProps = new Array<VariantPropType>();

export type PlasmicCountdownTest__ArgsType = {};
type ArgPropType = keyof PlasmicCountdownTest__ArgsType;
export const PlasmicCountdownTest__ArgProps = new Array<ArgPropType>();

export type PlasmicCountdownTest__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  headerV1?: p.Flex<typeof HeaderV1>;
  mobileCountdown?: p.Flex<typeof Embed>;
  mobileImage?: p.Flex<typeof p.PlasmicImg>;
  desktopCountdown?: p.Flex<typeof Tilt>;
  reveal?: p.Flex<typeof Reveal>;
  embedHtml?: p.Flex<typeof Embed>;
  bounceImage?: p.Flex<typeof Reveal>;
  musicMobile?: p.Flex<typeof Embed>;
};

export interface DefaultCountdownTestProps {}

function PlasmicCountdownTest__RenderFunc(props: {
  variants: PlasmicCountdownTest__VariantsArgs;
  args: PlasmicCountdownTest__ArgsType;
  overrides: PlasmicCountdownTest__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6EdLyFs6Xvmxe()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <title key="title">{"wearescrewed.com Alpha 2.0"}</title>

        <meta
          key="og:title"
          property="og:title"
          content={"wearescrewed.com Alpha 2.0"}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={"wearescrewed.com Alpha 2.0"}
        />

        <meta
          key="description"
          name="description"
          content={"wearescrewed.com 2.0 Alpha Testing - Closed"}
        />

        <meta
          key="og:description"
          property="og:description"
          content={"wearescrewed.com 2.0 Alpha Testing - Closed"}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={"wearescrewed.com 2.0 Alpha Testing - Closed"}
        />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/99f2a4b48293b39869be4a853d17a86a.png"
          }
        />

        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/99f2a4b48293b39869be4a853d17a86a.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {true ? (
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <React.Fragment>
                  {false ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__cIhGl)}
                      displayHeight={"40px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"705px" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      src={{
                        src: "/plasmic/wearescrewed_com/images/imageedit17520095357Png.png",
                        fullWidth: 1230,
                        fullHeight: 121,
                        aspectRatio: undefined
                      }}
                    />
                  ) : null}

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__n3Fj7
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__a9Ihw)}
                      tiltEnable={false}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__bq008)}
                        displayHeight={"40px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"705px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        src={{
                          src: "/plasmic/wearescrewed_com/images/imageedit17520095357Png.png",
                          fullWidth: 1230,
                          fullHeight: 121,
                          aspectRatio: undefined
                        }}
                      />
                    </Tilt>
                  </p.PlasmicLink>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___6PEQ)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={{
                    src: "/plasmic/wearescrewed_com/images/screenshot161Custompng.png",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: undefined
                  }}
                />
              }
              forceOpenMenu={false}
              itemsGap={8 as const}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___3CrhQ
                    )}
                    component={Link}
                    href={"/testy" as const}
                    platform={"nextjs"}
                  >
                    {"Countdown"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__wLl8W
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"About"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__dQw66
                    )}
                    component={Link}
                    href={
                      "https://sites.google.com/view/wearescrewed/home/" as const
                    }
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    {"Legacy"}
                  </p.PlasmicLink>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__nazgE)}
                  displayHeight={"33px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={{
                    src: "/plasmic/wearescrewed_com/images/screenshot162Custompng.png",
                    fullWidth: 16,
                    fullHeight: 16,
                    aspectRatio: undefined
                  }}
                />
              }
              responsiveBreakpoint={768 as const}
            />
          ) : null}

          <HeaderV1
            data-plasmic-name={"headerV1"}
            data-plasmic-override={overrides.headerV1}
            className={classNames("__wab_instance", sty.headerV1)}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wNvzQ
            )}
          >
            {"Time until Finals"}
          </div>

          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <Embed
              data-plasmic-name={"mobileCountdown"}
              data-plasmic-override={overrides.mobileCountdown}
              className={classNames("__wab_instance", sty.mobileCountdown)}
              code={
                '<script src="https://cdn.logwork.com/widget/countdown.js"></script>\r\n<a href="https://logwork.com/countdown-7ncd" class="countdown-timer" data-timezone="America/Chicago" data-textcolor="#1a1a1a" data-date="2022-07-27 17:34" data-background="#dde6f0" data-digitscolor="#1a1a1a" data-unitscolor="#e3e3e3">⠀</a>' as const
              }
            />
          ) : null}

          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <p.PlasmicImg
              data-plasmic-name={"mobileImage"}
              data-plasmic-override={overrides.mobileImage}
              alt={""}
              className={classNames(sty.mobileImage)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"90%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/wearescrewed_com/images/_4E9D87F8022D47F7Cae6012Efc96Bb82Gif.gif",
                fullWidth: 498,
                fullHeight: 276,
                aspectRatio: undefined
              }}
            />
          ) : null}

          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <Tilt
              data-plasmic-name={"desktopCountdown"}
              data-plasmic-override={overrides.desktopCountdown}
              className={classNames("__wab_instance", sty.desktopCountdown)}
              glareEnable={false}
              gyroscope={true}
              perspective={undefined}
            >
              <Reveal
                data-plasmic-name={"reveal"}
                data-plasmic-override={overrides.reveal}
                className={classNames("__wab_instance", sty.reveal)}
                delay={0 as const}
                duration={undefined}
                effect={"zoom" as const}
                reverse={false}
                triggerOnce={true}
              >
                {true ? (
                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      '<script src="https://cdn.logwork.com/widget/countdown.js"></script>\r\n<a href="https://logwork.com/countdown-7jck" class="countdown-timer" data-timezone="America/Chicago" data-textcolor="#1f1f1f" data-date="2022-12-19 08:00" data-background="#dde6f0" data-digitscolor="#1e2229" data-unitscolor="#1f1f1f">⠀</a>' as const
                    }
                  />
                ) : null}
              </Reveal>
            </Tilt>
          ) : null}

          {(hasVariant(globalVariants, "screen", "tablet") ? true : true) ? (
            <div className={classNames(projectcss.all, sty.freeBox___67Pm1)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aOz
                )}
              >
                {"DAYS"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bRdwl
                )}
              >
                {"HOURS"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__s9Un4
                )}
              >
                {"MINUTES"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Zodv
                )}
              >
                {"SECONDS"}
              </div>
            </div>
          ) : null}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rCoxT
            )}
          >
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#03E5F6" }}
              >
                {"I WONDER IF THIS WORKS"}
              </span>
            </React.Fragment>
          </div>

          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <Reveal
              data-plasmic-name={"bounceImage"}
              data-plasmic-override={overrides.bounceImage}
              cascade={false}
              className={classNames("__wab_instance", sty.bounceImage)}
              direction={"left" as const}
              effect={"bounce" as const}
              triggerOnce={true}
            >
              <Tilt
                className={classNames("__wab_instance", sty.tilt___0Seko)}
                glareBorderRadius={"" as const}
                glareEnable={false}
                glarePosition={"all" as const}
                gyroscope={true}
                perspective={250 as const}
                scale={1.1 as const}
                tiltMaxAngleX={10 as const}
                tiltMaxAngleY={10 as const}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rqc3V)}
                  displayHeight={"247px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"eager" as const}
                  src={{
                    src: "/plasmic/wearescrewed_com/images/_4E9D87F8022D47F7Cae6012Efc96Bb82Gif.gif",
                    fullWidth: 498,
                    fullHeight: 276,
                    aspectRatio: undefined
                  }}
                />
              </Tilt>
            </Reveal>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__xpHs2)}>
            {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
              <Embed
                data-plasmic-name={"musicMobile"}
                data-plasmic-override={overrides.musicMobile}
                className={classNames("__wab_instance", sty.musicMobile)}
                code={
                  '<style>\r\naudio{\r\nwidth: 100px !important;\r\n}\r\naudio::-webkit-media-controls-play-button{\r\nbackground-color:#9bc3fa !important;\r\n}\r\naudio::-webkit-media-controls-panel{\r\nbackground-color:#9bc3fa !important;\r\n}\r\naudio::-webkit-media-controls-current-time-display{\r\ndisplay:none !important;\r\n}\r\naudio::-webkit-media-controls-current-time-display{\r\ndisplay:none !important;\r\n}\r\naudio::-webkit-media-controls-time-remaining-display{\r\ndisplay:none !important;\r\n}\r\naudio::-webkit-media-controls-timeline{\r\ndisplay:none !important;\r\n}\r\naudio::-webkit-media-controls-mute-button{\r\ndisplay:none !important;\r\n}\r\n</style>\r\n\r\n<audio controls>\r\n<source src="https://firebasestorage.googleapis.com/v0/b/musichost-b3aa9.appspot.com/o/Extended%20wearescrewed1-3.mp3?alt=media&token=da0122a6-6489-40bb-b4ed-d20285e0f621" type="audio/mp3">\r\nSo sorry for this issue. But your browser does not support this audio.\r\n</audio>' as const
                }
              />
            ) : null}

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gn6Cg
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "wearescrewed v2.0\nMobile"
                : hasVariant(globalVariants, "screen", "tablet")
                ? "wearescrewed v2.0\nTablet"
                : "wearescrewed v2.0\nDesktop"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navigationBar",
    "headerV1",
    "mobileCountdown",
    "mobileImage",
    "desktopCountdown",
    "reveal",
    "embedHtml",
    "bounceImage",
    "musicMobile"
  ],
  navigationBar: ["navigationBar"],
  headerV1: ["headerV1"],
  mobileCountdown: ["mobileCountdown"],
  mobileImage: ["mobileImage"],
  desktopCountdown: ["desktopCountdown", "reveal", "embedHtml"],
  reveal: ["reveal", "embedHtml"],
  embedHtml: ["embedHtml"],
  bounceImage: ["bounceImage"],
  musicMobile: ["musicMobile"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  headerV1: typeof HeaderV1;
  mobileCountdown: typeof Embed;
  mobileImage: typeof p.PlasmicImg;
  desktopCountdown: typeof Tilt;
  reveal: typeof Reveal;
  embedHtml: typeof Embed;
  bounceImage: typeof Reveal;
  musicMobile: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCountdownTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCountdownTest__VariantsArgs;
    args?: PlasmicCountdownTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCountdownTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCountdownTest__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCountdownTest__ArgProps,
          internalVariantPropNames: PlasmicCountdownTest__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCountdownTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCountdownTest";
  } else {
    func.displayName = `PlasmicCountdownTest.${nodeName}`;
  }
  return func;
}

export const PlasmicCountdownTest = Object.assign(
  // Top-level PlasmicCountdownTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    headerV1: makeNodeComponent("headerV1"),
    mobileCountdown: makeNodeComponent("mobileCountdown"),
    mobileImage: makeNodeComponent("mobileImage"),
    desktopCountdown: makeNodeComponent("desktopCountdown"),
    reveal: makeNodeComponent("reveal"),
    embedHtml: makeNodeComponent("embedHtml"),
    bounceImage: makeNodeComponent("bounceImage"),
    musicMobile: makeNodeComponent("musicMobile"),

    // Metadata about props expected for PlasmicCountdownTest
    internalVariantProps: PlasmicCountdownTest__VariantProps,
    internalArgProps: PlasmicCountdownTest__ArgProps
  }
);

export default PlasmicCountdownTest;
/* prettier-ignore-end */
